<launch>
  <!-- Which robot are we controlling ? -->
  <arg name="script_file" doc="Full path to the script which initialize the supervisor"
    default="$(find sot_hpp_demo)/talos/pass_box_between_hands/supervisor.py" />
  <arg name="robot" default="pyrene" />
  <arg name="libsot" default="libsot-pyrene-controller.so" />   
  <arg name="sot-launch-prefix" default="" />   
  <!--<arg name="sot-launch-prefix" default="xterm -e gdb -ex run - -args" />   -->
  <!--<arg name="sot-launch-prefix" default="xterm -e gdb - -args" />   -->
  <!--<arg name="sot-launch-prefix" default="xterm -hold -e valgrind - -suppressions=/usr/lib/valgrind/python.supp - -num-callers=40 - -log-file=/tmp/sot-valgrind-%p" />   -->
  <!--<arg name="sot-launch-prefix" default="xterm -hold -e valgrind - -suppressions=/usr/lib/valgrind/python.supp - -vgdb=yes - -vgdb-error=140" />   -->

  <include file="$(find sot_pyrene_bringup)/launch/geometric_simu.launch" >
    <arg name="robot" value="$(arg robot)" />       
    <arg name="libsot" value="$(arg libsot)" />
    <arg name="sot-launch-prefix" value="$(arg sot-launch-prefix)" />
  </include>

  <group ns="hpp" >
    <node name="hpp_node" pkg="hpp_ros_interface" type="hpp_node.py"
      args="hpp-manipulation-server" respawn="true"
      output="screen" />
  </group>

  <group ns="sot_hpp" >
    <node name="path_execution_fsm" pkg="hpp_ros_interface"
      type="path_execution_fsm.py"
      output="screen" />
    <!-- From lunar, it is possible to use $(dirname) to get the directory
         of this launch file. So we could change
         $(arg script_file) 
         into
         $(arg dirname)/supervisor.py
         -->
    <node name="start_supervisor" pkg="sot_hpp"
      type="start_supervisor.py"
      output="screen"
      args="--input $(arg script_file) --prefix talos/"
      />
  </group>

  <node pkg="rviz" type="rviz" name="rviz" />
</launch>

